import {users} from "./DemoUser.js";
import {ethers} from "ethers";
import {contractAddress, contractAbi} from "./ContractData.js";
import {buildPoseidon} from "circomlibjs";
import {performance} from "perf_hooks";
import {groth16} from "snarkjs";
import dotenv from "dotenv";
dotenv.config({
    path: "../.env",
});

//K·∫øt n·ªëi ƒë·∫øn h·ª£p ƒë·ªìng Voting ƒë√£ tri·ªÉn khai
const provider = new ethers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

const votingContract = new ethers.Contract(
    contractAddress,
    contractAbi,
    wallet
);
console.log("‚úÖ Successfully connected to the Voting contract.");

// H√†m bƒÉm Poseidon
const poseidon = await buildPoseidon();
const F = poseidon.F;
function poseidonHash1(data) {
    return F.toObject(poseidon([BigInt(data)]));
}

function poseidonHash2(data1, data2) {
    return F.toObject(poseidon([BigInt(data1), BigInt(data2)]));
}

async function demoVote(candidateIndex) {
    const demoUser = 3; // Gi·∫£ s·ª≠ c·ª≠ tri l√† user th·ª© ba
    const startSetup = performance.now();
    // 1. Khi b·∫Øt ƒë·∫ßu m·ªôt cu·ªôc b·∫ßu c·ª≠ m·ªõi, m·ªói c·ª≠ tri s·∫Ω ƒë∆∞·ª£c c·∫•p
    //    m·ªôt secret duy nh·∫•t v√† m·ªôt nullifierTrapdoor.

    const userSecret = users[demoUser].secret; // Gi·∫£ s·ª≠ c·ª≠ tri l√† user th·ª© ba
    const userNullifierTrapdoor = users[demoUser].nullifierTrapdoor;
    console.log("User Secret:", userSecret);
    console.log("User Nullifier Trapdoor:", userNullifierTrapdoor);

    // 2. C√°c th√¥ng tin c·∫ßn thi·∫øt v·ªÅ cu·ªôc b·∫ßu c·ª≠ s·∫Ω ƒë∆∞·ª£c public t·ª´
    //    h·ª£p ƒë·ªìng th√¥ng minh, bao g·ªìm electionId, merkleRoot v√† numCandidates.
    const electionInfo = await votingContract.getElectionInfo();
    const electionId = electionInfo._electionId;
    const merkleRoot = BigInt(electionInfo._merkleRoot);
    const numCandidates = electionInfo._numCandidates;

    console.log("Election ID:", electionId.toString());
    console.log("Merkle Root:", merkleRoot.toString());
    console.log("Number of Candidates:", numCandidates.toString());

    // 3. T·∫°o vote array d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa c·ª≠ tri
    const votes = Array(Number(numCandidates)).fill(0);
    votes[candidateIndex - 1] = 1;
    console.log("Votes array:", votes);

    // 4. T·∫°o randomness v√† t·∫°o commitment
    const randomness = BigInt(Math.floor(Math.random() * 1000000));
    const commitmentInputs = [...votes.map((v) => BigInt(v)), randomness];
    const commitment = F.toObject(poseidon(commitmentInputs));
    console.log("Commitment:", commitment.toString());

    // 5. T√≠nh c√¢y merkle v√† t·∫°o b·∫±ng ch·ª©ng ƒë∆∞·ªùng ƒëi
    const {pathElements, pathIndices} = calcMerkleProof(demoUser, 2); // T·∫°o b·∫±ng ch·ª©ng cho user th·ª© ba v·ªõi ƒë·ªô s√¢u 2

    // 6. T·∫°o input cho zk-SNARK
    const zkInputs = {
        secret: userSecret,
        nullifierTrapdoor: userNullifierTrapdoor,
        vote: votes,
        randomness: randomness.toString(),
        commitment: commitment.toString(),
        pathElements: pathElements,
        pathIndices: pathIndices,
        electionId: electionId.toString(),
        merkleRoot: merkleRoot.toString(),
    };

    const endSetup = performance.now();
    console.log(
        `‚úÖ Setup generated successfully in ${(endSetup - startSetup).toFixed(
            2
        )} ms`
    );
    console.log("ZK Inputs:", zkInputs);

    // 7. T·∫°o zk-SNARK proof (Groth16)
    console.log("üîÑ Generating ZK proof...");
    const startProof = performance.now();
    const {proof, publicSignals} = await groth16.fullProve(
        zkInputs,
        "../zkp_proof/voting_js/voting.wasm",
        "../zkp_proof/voting_0001.zkey"
    );
    const endProof = performance.now();
    console.log(
        `‚úÖ Proof generated successfully in ${(endProof - startProof).toFixed(
            2
        )} ms`
    );
    console.log("Proof:", proof);
    console.log("Public Signals:", publicSignals);

    // 8. Format proof cho Solidity
    const calldata = await groth16.exportSolidityCallData(proof, publicSignals);
    const solidityProof = formatProofForSolidity(calldata, commitment);
    console.log("Solidity Proof:", solidityProof);

    //9. Submit vote l√™n blockchain
    console.log("üîÑ Submitting vote to the blockchain...");
    const startOnChain = performance.now();
    const tx = await votingContract.submitVote(
        solidityProof.a,
        solidityProof.b,
        solidityProof.c,
        solidityProof.solidity_publicSignals,
        solidityProof.solidity_commitment
    );
    const receipt = await tx.wait();
    const endOnChain = performance.now();
    console.log(
        `‚úÖ Vote submitted successfully in ${(
            endOnChain - startOnChain
        ).toFixed(2)} ms`
    );

    const gasUsed = receipt.gasUsed;
    const gasPrice = tx.gasPrice ?? (await provider.getFeeData()).gasPrice;
    const gasFeeEth = (Number(gasUsed) * Number(gasPrice)) / 1e18;
    console.log(`‚õΩ Gas used: ${gasUsed.toString()}`);
    console.log(`üí∞ Gas fee: ${gasFeeEth.toFixed(8)} ETH`);

    try {
    } catch (error) {
        console.error("Error in demoVote:", error);
    }
}

function calcMerkleProof(_userIndex, _depth) {
    // T·∫°o l√° (leaves) c·ªßa c√¢y Merkle t·ª´ danh s√°ch secret c·ªßa ng∆∞·ªùi d√πng
    const leaves = users.map((user) => poseidonHash1(user.secret));

    // ƒê·ªëi v·ªõi m·ªôt c√¢y c√≥ ƒë·ªô s√¢u 2, ch√∫ng ta c·∫ßn 4 l√° (2^2 = 4)
    // Th√™m c√°c gi√° tr·ªã 0 n·∫øu kh√¥ng ƒë·ªß l√°
    while (leaves.length < Math.pow(2, _depth)) {
        leaves.push(BigInt(0));
    }

    // X√¢y d·ª±ng c√¢y Merkle t·ª´ d∆∞·ªõi l√™n
    let currentLevel = [...leaves];
    const tree = [currentLevel];

    for (let level = 0; level < _depth; level++) {
        const nextLevel = [];
        for (let i = 0; i < currentLevel.length; i += 2) {
            const left = currentLevel[i];
            const right = currentLevel[i + 1] || BigInt(0);
            const hash = poseidonHash2(left, right);
            nextLevel.push(hash);
        }
        tree.push(nextLevel);
        currentLevel = nextLevel;
    }

    // T·∫°o b·∫±ng ch·ª©ng ƒë∆∞·ªùng ƒëi cho ng∆∞·ªùi d√πng c·ª• th·ªÉ
    const userIndex = _userIndex;
    const user = users[userIndex];

    // T√≠nh to√°n c√°c ph·∫ßn t·ª≠ ƒë∆∞·ªùng ƒëi v√† ch·ªâ s·ªë
    const pathElements = [];
    const pathIndices = [];

    let currentIndex = userIndex;
    for (let level = 0; level < _depth; level++) {
        const isRightChild = currentIndex % 2 === 1;
        const siblingIndex = isRightChild ? currentIndex - 1 : currentIndex + 1;

        // L·∫•y c√°c ph·∫ßn t·ª≠ anh em
        const siblingElement = tree[level][siblingIndex] || BigInt(0);
        pathElements.push(siblingElement.toString());

        // Ch·ªâ s·ªë ƒë∆∞·ªùng ƒëi: 0 n·∫øu hi·ªán t·∫°i l√† n√∫t tr√°i, 1 n·∫øu hi·ªán t·∫°i l√† n√∫t ph·∫£i
        pathIndices.push(isRightChild ? 1 : 0);

        currentIndex = Math.floor(currentIndex / 2);
    }
    console.log("PathElements:", pathElements);
    console.log("PathIndices:", pathIndices);
    return {
        pathElements,
        pathIndices,
    };
}

function formatProofForSolidity(calldata, commitment) {
    const argv = calldata
        .replace(/["[\]\s]/g, "")
        .split(",")
        .map((x) => BigInt(x).toString());
    const a = [argv[0], argv[1]];
    const b = [
        [argv[2], argv[3]],
        [argv[4], argv[5]],
    ];
    const c = [argv[6], argv[7]];
    const solidity_publicSignals = [argv.slice(8)];
    const solidity_commitment =
        "0x" + BigInt(commitment).toString(16).padStart(64, "0");
    return {
        a,
        b,
        c,
        solidity_publicSignals: solidity_publicSignals.flat(),
        solidity_commitment,
    };
}

demoVote(1); // B·ªè phi·∫øu cho ·ª©ng c·ª≠ vi√™n s·ªë 1
